#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Diagn√≥stico - Sistema Quality Control Panel
Diagnostica problemas e fornece solu√ß√µes
"""

import os
import sys
import json
import subprocess
import socket
import time
from datetime import datetime
from pathlib import Path

def print_banner():
    """Exibe banner de diagn√≥stico"""
    print("=" * 70)
    print("üîç QUALITY CONTROL PANEL - DIAGN√ìSTICO DO SISTEMA")
    print("=" * 70)
    print("Diagn√≥stico completo de problemas e solu√ß√µes")
    print("=" * 70)
    print()

def check_python_environment():
    """Verifica ambiente Python"""
    print("üêç Verificando ambiente Python...")
    
    issues = []
    
    # Vers√£o do Python
    python_version = sys.version_info
    if python_version < (3, 7):
        issues.append({
            'type': 'error',
            'message': f'Python {python_version.major}.{python_version.minor} √© muito antigo',
            'solution': 'Atualize para Python 3.7 ou superior'
        })
    else:
        print(f"   ‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro} - OK")
    
    # Depend√™ncias Python
    dependencies = [
        'websocket',
        'websocket_server',
        'colorama',
        'rich',
        'requests'
    ]
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"   ‚úÖ {dep} - OK")
        except ImportError:
            issues.append({
                'type': 'error',
                'message': f'Depend√™ncia {dep} n√£o instalada',
                'solution': f'Execute: pip install {dep}'
            })
    
    return issues

def check_system_files():
    """Verifica arquivos do sistema"""
    print("\nüìÅ Verificando arquivos do sistema...")
    
    issues = []
    
    # Componentes principais
    components = {
        'servidor': 'C:\\Quality\\ControlPanel',
        'atendente': 'C:\\Quality\\AttendantClient',
        'cliente': 'C:\\Quality\\RemoteAgent'
    }
    
    for name, path in components.items():
        if os.path.exists(path):
            print(f"   ‚úÖ {name.capitalize()}: {path}")
            
            # Verificar arquivos principais
            if name == 'servidor':
                main_files = [
                    'main.py',
                    'config/server_config.json',
                    'config/users_config.json',
                    'core/server.py'
                ]
                
                for file in main_files:
                    file_path = os.path.join(path, file)
                    if os.path.exists(file_path):
                        print(f"      ‚úÖ {file}")
                    else:
                        issues.append({
                            'type': 'error',
                            'message': f'Arquivo {file} n√£o encontrado no servidor',
                            'solution': f'Reinstale o componente servidor'
                        })
            
        else:
            issues.append({
                'type': 'error',
                'message': f'Componente {name} n√£o instalado',
                'solution': f'Execute: python install_{name}_quick.py'
            })
    
    return issues

def check_network_connectivity():
    """Verifica conectividade de rede"""
    print("\nüåê Verificando conectividade de rede...")
    
    issues = []
    
    # Verificar porta 8765
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('localhost', 8765))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ Porta 8765 est√° em uso (servidor pode estar rodando)")
        else:
            print("   ‚ÑπÔ∏è  Porta 8765 est√° livre (servidor n√£o est√° rodando)")
            
    except Exception as e:
        issues.append({
            'type': 'warning',
            'message': f'Erro ao verificar porta 8765: {e}',
            'solution': 'Verifique se o servidor est√° rodando'
        })
    
    # Verificar conectividade com internet
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('8.8.8.8', 53))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ Conectividade com internet - OK")
        else:
            issues.append({
                'type': 'warning',
                'message': 'Sem conectividade com internet',
                'solution': 'Verifique sua conex√£o de rede'
            })
            
    except Exception as e:
        issues.append({
            'type': 'warning',
            'message': f'Erro ao verificar conectividade: {e}',
            'solution': 'Verifique sua conex√£o de rede'
        })
    
    return issues

def check_services():
    """Verifica servi√ßos Quality"""
    print("\nüñ•Ô∏è  Verificando servi√ßos Quality...")
    
    issues = []
    
    quality_services = [
        "srvIntegraWeb",
        "srvIntegraFiscal",
        "srvIntegraContabil",
        "srvIntegraEstoque",
        "srvIntegraFinanceiro"
    ]
    
    for service in quality_services:
        try:
            result = subprocess.run([
                "sc", "query", service
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                # Extrair status do servi√ßo
                lines = result.stdout.split('\n')
                state = "Unknown"
                for line in lines:
                    if "STATE" in line:
                        state = line.split("STATE")[1].strip()
                        break
                
                if "RUNNING" in state:
                    print(f"   ‚úÖ {service}: {state}")
                else:
                    issues.append({
                        'type': 'warning',
                        'message': f'Servi√ßo {service} n√£o est√° rodando: {state}',
                        'solution': f'Execute: net start {service}'
                    })
            else:
                issues.append({
                    'type': 'info',
                    'message': f'Servi√ßo {service} n√£o encontrado',
                    'solution': f'Instale o servi√ßo {service} se necess√°rio'
                })
                
        except Exception as e:
            issues.append({
                'type': 'error',
                'message': f'Erro ao verificar servi√ßo {service}: {e}',
                'solution': 'Verifique permiss√µes de administrador'
            })
    
    return issues

def check_permissions():
    """Verifica permiss√µes do sistema"""
    print("\nüîê Verificando permiss√µes...")
    
    issues = []
    
    # Verificar se est√° rodando como administrador
    try:
        import ctypes
        is_admin = ctypes.windll.shell32.IsUserAnAdmin()
        
        if is_admin:
            print("   ‚úÖ Executando como administrador")
        else:
            issues.append({
                'type': 'warning',
                'message': 'N√£o est√° executando como administrador',
                'solution': 'Execute o script como administrador'
            })
            
    except Exception as e:
        issues.append({
            'type': 'error',
            'message': f'Erro ao verificar permiss√µes: {e}',
            'solution': 'Verifique se est√° executando como administrador'
        })
    
    # Verificar permiss√µes de escrita
    test_dirs = [
        "C:\\Quality",
        "C:\\Quality\\ControlPanel",
        "C:\\Quality\\Logs"
    ]
    
    for test_dir in test_dirs:
        try:
            if os.path.exists(test_dir):
                test_file = os.path.join(test_dir, "test_write.tmp")
                with open(test_file, 'w') as f:
                    f.write("test")
                os.remove(test_file)
                print(f"   ‚úÖ Permiss√£o de escrita: {test_dir}")
            else:
                print(f"   ‚ÑπÔ∏è  Diret√≥rio n√£o existe: {test_dir}")
                
        except Exception as e:
            issues.append({
                'type': 'error',
                'message': f'Sem permiss√£o de escrita em {test_dir}',
                'solution': 'Execute como administrador ou ajuste permiss√µes'
            })
    
    return issues

def check_configuration():
    """Verifica configura√ß√µes"""
    print("\n‚öôÔ∏è  Verificando configura√ß√µes...")
    
    issues = []
    
    # Verificar configura√ß√£o do servidor
    server_config_file = "C:\\Quality\\ControlPanel\\config\\server_config.json"
    if os.path.exists(server_config_file):
        try:
            with open(server_config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Verificar configura√ß√µes essenciais
            if 'server' in config:
                server_config = config['server']
                if 'host' in server_config and 'port' in server_config:
                    print(f"   ‚úÖ Configura√ß√£o do servidor: {server_config['host']}:{server_config['port']}")
                else:
                    issues.append({
                        'type': 'error',
                        'message': 'Configura√ß√£o do servidor incompleta',
                        'solution': 'Execute: python configure_system.py'
                    })
            else:
                issues.append({
                    'type': 'error',
                    'message': 'Se√ß√£o server n√£o encontrada na configura√ß√£o',
                    'solution': 'Execute: python configure_system.py'
                })
                
        except Exception as e:
            issues.append({
                'type': 'error',
                'message': f'Erro ao ler configura√ß√£o do servidor: {e}',
                'solution': 'Execute: python configure_system.py'
            })
    else:
        issues.append({
            'type': 'error',
            'message': 'Arquivo de configura√ß√£o do servidor n√£o encontrado',
            'solution': 'Execute: python configure_system.py'
        })
    
    # Verificar configura√ß√£o de usu√°rios
    users_config_file = "C:\\Quality\\ControlPanel\\config\\users_config.json"
    if os.path.exists(users_config_file):
        try:
            with open(users_config_file, 'r', encoding='utf-8') as f:
                users_config = json.load(f)
            
            if 'attendants' in users_config and len(users_config['attendants']) > 0:
                print(f"   ‚úÖ Configura√ß√£o de usu√°rios: {len(users_config['attendants'])} usu√°rios")
            else:
                issues.append({
                    'type': 'error',
                    'message': 'Nenhum usu√°rio configurado',
                    'solution': 'Execute: python configure_system.py'
                })
                
        except Exception as e:
            issues.append({
                'type': 'error',
                'message': f'Erro ao ler configura√ß√£o de usu√°rios: {e}',
                'solution': 'Execute: python configure_system.py'
            })
    else:
        issues.append({
            'type': 'error',
            'message': 'Arquivo de configura√ß√£o de usu√°rios n√£o encontrado',
            'solution': 'Execute: python configure_system.py'
        })
    
    return issues

def check_logs():
    """Verifica logs do sistema"""
    print("\nüìã Verificando logs...")
    
    issues = []
    
    # Verificar diret√≥rio de logs
    log_dirs = [
        "C:\\Quality\\Logs",
        "C:\\Quality\\ControlPanel\\logs"
    ]
    
    for log_dir in log_dirs:
        if os.path.exists(log_dir):
            try:
                files = os.listdir(log_dir)
                if files:
                    print(f"   ‚úÖ Logs encontrados em {log_dir}: {len(files)} arquivos")
                    
                    # Verificar tamanho dos logs
                    total_size = 0
                    for file in files:
                        file_path = os.path.join(log_dir, file)
                        if os.path.isfile(file_path):
                            total_size += os.path.getsize(file_path)
                    
                    total_size_mb = total_size / (1024 * 1024)
                    if total_size_mb > 100:  # Mais de 100MB
                        issues.append({
                            'type': 'warning',
                            'message': f'Logs muito grandes: {total_size_mb:.1f}MB',
                            'solution': 'Execute: python backup_restore_system.py (op√ß√£o 5)'
                        })
                    else:
                        print(f"   ‚úÖ Tamanho dos logs: {total_size_mb:.1f}MB")
                else:
                    print(f"   ‚ÑπÔ∏è  Nenhum log encontrado em {log_dir}")
                    
            except Exception as e:
                issues.append({
                    'type': 'error',
                    'message': f'Erro ao verificar logs em {log_dir}: {e}',
                    'solution': 'Verifique permiss√µes de acesso'
                })
        else:
            print(f"   ‚ÑπÔ∏è  Diret√≥rio de logs n√£o encontrado: {log_dir}")
    
    return issues

def check_performance():
    """Verifica performance do sistema"""
    print("\n‚ö° Verificando performance...")
    
    issues = []
    
    try:
        import psutil
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > 80:
            issues.append({
                'type': 'warning',
                'message': f'Uso de CPU alto: {cpu_percent}%',
                'solution': 'Verifique processos em execu√ß√£o'
            })
        else:
            print(f"   ‚úÖ CPU: {cpu_percent}%")
        
        # Mem√≥ria
        memory = psutil.virtual_memory()
        if memory.percent > 80:
            issues.append({
                'type': 'warning',
                'message': f'Uso de mem√≥ria alto: {memory.percent}%',
                'solution': 'Reinicie o sistema ou feche aplica√ß√µes desnecess√°rias'
            })
        else:
            print(f"   ‚úÖ Mem√≥ria: {memory.percent}%")
        
        # Disco
        disk = psutil.disk_usage('C:')
        disk_percent = (disk.used / disk.total) * 100
        if disk_percent > 80:
            issues.append({
                'type': 'warning',
                'message': f'Uso de disco alto: {disk_percent:.1f}%',
                'solution': 'Libere espa√ßo em disco'
            })
        else:
            print(f"   ‚úÖ Disco: {disk_percent:.1f}%")
        
    except ImportError:
        issues.append({
            'type': 'info',
            'message': 'psutil n√£o instalado - n√£o √© poss√≠vel verificar performance',
            'solution': 'Execute: pip install psutil'
        })
    except Exception as e:
        issues.append({
            'type': 'error',
            'message': f'Erro ao verificar performance: {e}',
            'solution': 'Verifique se o sistema est√° funcionando normalmente'
        })
    
    return issues

def generate_diagnostic_report(issues):
    """Gera relat√≥rio de diagn√≥stico"""
    print("\n" + "=" * 70)
    print("üìä RELAT√ìRIO DE DIAGN√ìSTICO")
    print("=" * 70)
    
    if not issues:
        print("üéâ NENHUM PROBLEMA ENCONTRADO!")
        print("‚úÖ O sistema est√° funcionando corretamente")
        return
    
    # Agrupar por tipo
    errors = [i for i in issues if i['type'] == 'error']
    warnings = [i for i in issues if i['type'] == 'warning']
    info = [i for i in issues if i['type'] == 'info']
    
    print(f"üìà RESUMO:")
    print(f"   ‚ùå Erros: {len(errors)}")
    print(f"   ‚ö†Ô∏è  Avisos: {len(warnings)}")
    print(f"   ‚ÑπÔ∏è  Informa√ß√µes: {len(info)}")
    
    # Exibir problemas
    if errors:
        print(f"\n‚ùå ERROS CR√çTICOS ({len(errors)}):")
        for i, issue in enumerate(errors, 1):
            print(f"   {i}. {issue['message']}")
            print(f"      üí° Solu√ß√£o: {issue['solution']}")
            print()
    
    if warnings:
        print(f"\n‚ö†Ô∏è  AVISOS ({len(warnings)}):")
        for i, issue in enumerate(warnings, 1):
            print(f"   {i}. {issue['message']}")
            print(f"      üí° Solu√ß√£o: {issue['solution']}")
            print()
    
    if info:
        print(f"\n‚ÑπÔ∏è  INFORMA√á√ïES ({len(info)}):")
        for i, issue in enumerate(info, 1):
            print(f"   {i}. {issue['message']}")
            print(f"      üí° Solu√ß√£o: {issue['solution']}")
            print()
    
    # Salvar relat√≥rio
    try:
        report_file = f"C:\\Quality\\Logs\\diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        os.makedirs(os.path.dirname(report_file), exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("Relat√≥rio de Diagn√≥stico - Quality Control Panel\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Total de problemas: {len(issues)}\n\n")
            
            for issue in issues:
                f.write(f"[{issue['type'].upper()}] {issue['message']}\n")
                f.write(f"Solu√ß√£o: {issue['solution']}\n\n")
        
        print(f"üìù Relat√≥rio salvo: {report_file}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao salvar relat√≥rio: {e}")

def show_menu():
    """Exibe menu de diagn√≥stico"""
    print("\nüìã MENU DE DIAGN√ìSTICO:")
    print("1. Diagn√≥stico completo")
    print("2. Verificar ambiente Python")
    print("3. Verificar arquivos do sistema")
    print("4. Verificar conectividade de rede")
    print("5. Verificar servi√ßos Quality")
    print("6. Verificar permiss√µes")
    print("7. Verificar configura√ß√µes")
    print("8. Verificar logs")
    print("9. Verificar performance")
    print("0. Sair")
    
    return input("\nEscolha uma op√ß√£o: ").strip()

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    while True:
        choice = show_menu()
        
        if choice == "1":
            # Diagn√≥stico completo
            print("\nüîç Executando diagn√≥stico completo...")
            
            all_issues = []
            all_issues.extend(check_python_environment())
            all_issues.extend(check_system_files())
            all_issues.extend(check_network_connectivity())
            all_issues.extend(check_services())
            all_issues.extend(check_permissions())
            all_issues.extend(check_configuration())
            all_issues.extend(check_logs())
            all_issues.extend(check_performance())
            
            generate_diagnostic_report(all_issues)
            
        elif choice == "2":
            # Verificar ambiente Python
            issues = check_python_environment()
            generate_diagnostic_report(issues)
            
        elif choice == "3":
            # Verificar arquivos do sistema
            issues = check_system_files()
            generate_diagnostic_report(issues)
            
        elif choice == "4":
            # Verificar conectividade de rede
            issues = check_network_connectivity()
            generate_diagnostic_report(issues)
            
        elif choice == "5":
            # Verificar servi√ßos Quality
            issues = check_services()
            generate_diagnostic_report(issues)
            
        elif choice == "6":
            # Verificar permiss√µes
            issues = check_permissions()
            generate_diagnostic_report(issues)
            
        elif choice == "7":
            # Verificar configura√ß√µes
            issues = check_configuration()
            generate_diagnostic_report(issues)
            
        elif choice == "8":
            # Verificar logs
            issues = check_logs()
            generate_diagnostic_report(issues)
            
        elif choice == "9":
            # Verificar performance
            issues = check_performance()
            generate_diagnostic_report(issues)
            
        elif choice == "0":
            # Sair
            print("\nüëã Encerrando diagn√≥stico...")
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida")
        
        input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Diagn√≥stico encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("\nPressione Enter para sair...")
