#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Corre√ß√£o R√°pida - Imports do Servidor
Corrige problemas de importa√ß√£o no servidor instalado
"""

import os
import shutil
from pathlib import Path

def fix_server_imports():
    """Corrige imports no servidor instalado"""
    print("üîß Corrigindo imports do servidor...")
    
    try:
        # Caminho do servidor instalado
        server_path = "C:\\Quality\\ControlPanel"
        
        if not os.path.exists(server_path):
            print(f"‚ùå Servidor n√£o encontrado em: {server_path}")
            return False
        
        # Caminho do arquivo com problema
        auth_file = os.path.join(server_path, "utils", "auth.py")
        
        if os.path.exists(auth_file):
            print(f"   üìù Corrigindo: {auth_file}")
            
            # Ler arquivo
            with open(auth_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Corrigir import
            old_import = "from typing import Dict, Any, Optional, Tuple"
            new_import = "from typing import Dict, Any, Optional, Tuple, List"
            
            if old_import in content:
                content = content.replace(old_import, new_import)
                
                # Salvar arquivo corrigido
                with open(auth_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print("   ‚úÖ Import corrigido com sucesso!")
            else:
                print("   ‚ÑπÔ∏è  Import j√° est√° correto")
        else:
            print(f"   ‚ùå Arquivo n√£o encontrado: {auth_file}")
            return False
        
        print("‚úÖ Corre√ß√£o conclu√≠da!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir imports: {e}")
        return False

def test_server_start():
    """Testa se o servidor inicia corretamente"""
    print("\nüß™ Testando inicializa√ß√£o do servidor...")
    
    try:
        import sys
        server_path = "C:\\Quality\\ControlPanel"
        
        if os.path.exists(server_path):
            # Adicionar ao path
            sys.path.insert(0, server_path)
            
            # Testar imports
            try:
                from utils.auth import QualityAuthManager
                print("   ‚úÖ utils.auth importado com sucesso")
                
                from core.server import QualityControlServer
                print("   ‚úÖ core.server importado com sucesso")
                
                from core.session_manager import SessionManager
                print("   ‚úÖ core.session_manager importado com sucesso")
                
                from core.attendant_manager import AttendantManager
                print("   ‚úÖ core.attendant_manager importado com sucesso")
                
                print("‚úÖ Todos os imports funcionando!")
                return True
                
            except Exception as e:
                print(f"   ‚ùå Erro ao importar: {e}")
                return False
        else:
            print(f"   ‚ùå Servidor n√£o encontrado: {server_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üîß CORRE√á√ÉO R√ÅPIDA - IMPORTS DO SERVIDOR")
    print("=" * 60)
    print("Corrigindo problemas de importa√ß√£o no servidor")
    print("=" * 60)
    print()
    
    # Corrigir imports
    if fix_server_imports():
        # Testar servidor
        if test_server_start():
            print("\n" + "=" * 60)
            print("üéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("=" * 60)
            print("‚úÖ Imports corrigidos")
            print("‚úÖ Servidor testado")
            print("‚úÖ Pronto para uso!")
            print()
            print("üöÄ Agora voc√™ pode executar:")
            print("   C:\\Quality\\ControlPanel\\start_server.bat")
            print("=" * 60)
        else:
            print("\n‚ö†Ô∏è  Corre√ß√£o aplicada, mas teste falhou")
            print("   Verifique os logs para mais detalhes")
    else:
        print("\n‚ùå Falha na corre√ß√£o")
        print("   Verifique se o servidor est√° instalado corretamente")
    
    input("\nPressione Enter para finalizar...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Corre√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("\nPressione Enter para sair...")
