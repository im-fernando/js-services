#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Instala√ß√£o - Cliente Atendente
Instala apenas a interface de atendente nos computadores dos atendentes
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def print_banner():
    """Exibe banner de instala√ß√£o"""
    print("=" * 70)
    print("üë• QUALITY CONTROL PANEL - INSTALA√á√ÉO ATENDENTE")
    print("=" * 70)
    print("Interface de atendente para conex√£o com o servidor")
    print("=" * 70)
    print()

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_dependencies():
    """Instala depend√™ncias m√≠nimas"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        # Depend√™ncias m√≠nimas para o cliente atendente
        deps = [
            "websocket-client==1.6.4",
            "colorama==0.4.6"
        ]
        
        for dep in deps:
            print(f"   Instalando {dep}...")
            subprocess.run([sys.executable, "-m", "pip", "install", dep], 
                         check=True, capture_output=True)
        
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def create_installation_directory():
    """Cria diret√≥rio de instala√ß√£o"""
    print("\nüìÅ Criando diret√≥rio de instala√ß√£o...")
    
    install_dir = Path("C:\\Quality\\AttendantClient")
    
    try:
        install_dir.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {install_dir}")
        return install_dir
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rio: {e}")
        return None

def copy_attendant_files(install_dir: Path):
    """Copia arquivos necess√°rios para o atendente"""
    print("\nüìã Copiando arquivos do atendente...")
    
    try:
        # Copiar interface de atendente
        source_file = Path(__file__).parent / "servidor_control" / "interface" / "attendant_cli.py"
        if source_file.exists():
            shutil.copy2(source_file, install_dir / "attendant_cli.py")
            print("   ‚úÖ attendant_cli.py")
        else:
            print("   ‚ùå attendant_cli.py n√£o encontrado")
            return False
        
        # Copiar utils necess√°rios
        utils_source = Path(__file__).parent / "servidor_control" / "utils"
        utils_dest = install_dir / "utils"
        
        if utils_source.exists():
            if utils_dest.exists():
                shutil.rmtree(utils_dest)
            shutil.copytree(utils_source, utils_dest)
            print("   ‚úÖ utils/")
        
        # Copiar config de usu√°rios (para autentica√ß√£o local)
        config_source = Path(__file__).parent / "servidor_control" / "config" / "users_config.json"
        config_dest = install_dir / "config"
        
        if config_source.exists():
            config_dest.mkdir(exist_ok=True)
            shutil.copy2(config_source, config_dest / "users_config.json")
            print("   ‚úÖ config/users_config.json")
        
        print("‚úÖ Arquivos copiados com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao copiar arquivos: {e}")
        return False

def create_startup_script(install_dir: Path, server_host: str, server_port: int):
    """Cria script de inicializa√ß√£o"""
    print("\nüöÄ Criando script de inicializa√ß√£o...")
    
    try:
        # Script batch para Windows
        batch_content = f"""@echo off
echo Iniciando Quality Control Panel - Atendente...
cd /d "{install_dir}"
python attendant_cli.py --server {server_host}:{server_port}
pause
"""
        
        batch_file = install_dir / "start_attendant.bat"
        with open(batch_file, 'w', encoding='utf-8') as f:
            f.write(batch_content)
        
        print(f"‚úÖ Script criado: {batch_file}")
        
        # Script Python alternativo
        python_content = f"""#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import os
sys.path.append(r"{install_dir}")
os.chdir(r"{install_dir}")
from attendant_cli import main
if __name__ == "__main__":
    main()
"""
        
        python_file = install_dir / "start_attendant.py"
        with open(python_file, 'w', encoding='utf-8') as f:
            f.write(python_content)
        
        print(f"‚úÖ Script Python criado: {python_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar scripts: {e}")
        return False

def get_server_configuration():
    """Obt√©m configura√ß√£o do servidor"""
    print("\nüåê Configura√ß√£o do Servidor")
    print("-" * 40)
    
    # IP do servidor
    server_host = input("IP do Servidor (ex: 192.168.1.100): ").strip()
    if not server_host:
        server_host = "192.168.1.100"
    
    # Porta do servidor
    server_port = input("Porta do Servidor (padr√£o: 8765): ").strip()
    if not server_port:
        server_port = "8765"
    
    try:
        server_port = int(server_port)
    except ValueError:
        server_port = 8765
    
    return server_host, server_port

def test_connection(server_host: str, server_port: int):
    """Testa conex√£o com o servidor"""
    print(f"\nüîç Testando conex√£o com {server_host}:{server_port}...")
    
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((server_host, server_port))
        sock.close()
        
        if result == 0:
            print("‚úÖ Conex√£o com servidor OK")
            return True
        else:
            print("‚ùå N√£o foi poss√≠vel conectar ao servidor")
            print("   Verifique se o servidor est√° rodando e acess√≠vel")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def test_installation(install_dir: Path):
    """Testa a instala√ß√£o"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        # Testar importa√ß√£o dos m√≥dulos
        test_script = f"""
import sys
sys.path.append(r"{install_dir}")

try:
    from attendant_cli import AttendantCLI
    print("‚úÖ Interface de atendente importada com sucesso")
except Exception as e:
    print(f"‚ùå Erro ao importar interface: {{e}}")
    sys.exit(1)

print("‚úÖ Teste de instala√ß√£o conclu√≠do com sucesso!")
"""
        
        result = subprocess.run([
            sys.executable, "-c", test_script
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Teste de instala√ß√£o passou")
            return True
        else:
            print("‚ùå Teste de instala√ß√£o falhou")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def show_installation_summary(install_dir: Path, server_host: str, server_port: int):
    """Exibe resumo da instala√ß√£o"""
    print("\n" + "=" * 70)
    print("üéâ INSTALA√á√ÉO DO ATENDENTE CONCLU√çDA COM SUCESSO!")
    print("=" * 70)
    print(f"üìÅ Diret√≥rio: {install_dir}")
    print(f"üåê Servidor: {server_host}:{server_port}")
    print()
    print("üöÄ COMO USAR:")
    print(f"   {install_dir}\\start_attendant.bat")
    print()
    print("üë§ USU√ÅRIOS DISPON√çVEIS:")
    print("   admin / admin123 (Administrador)")
    print("   joao.silva / quality123 (Suporte S√™nior)")
    print("   maria.santos / quality123 (Suporte J√∫nior)")
    print()
    print("‚ö†Ô∏è  IMPORTANTE:")
    print("   - Altere as senhas padr√£o ap√≥s o primeiro login")
    print("   - Certifique-se de que o servidor est√° rodando")
    print("   - Verifique a conectividade de rede")
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Execute o script de inicializa√ß√£o")
    print("2. Fa√ßa login com suas credenciais")
    print("3. Conecte-se ao servidor")
    print("4. Comece a gerenciar os clientes Quality")
    print("=" * 70)

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print_banner()
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        input("\nPressione Enter para sair...")
        return False
    
    # Obter configura√ß√£o do servidor
    server_host, server_port = get_server_configuration()
    
    # Testar conex√£o
    if not test_connection(server_host, server_port):
        print("\n‚ö†Ô∏è  Continuando instala√ß√£o mesmo sem conex√£o...")
        print("   Voc√™ pode testar a conex√£o depois")
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias")
        input("\nPressione Enter para sair...")
        return False
    
    # Criar diret√≥rio de instala√ß√£o
    install_dir = create_installation_directory()
    if not install_dir:
        input("\nPressione Enter para sair...")
        return False
    
    # Copiar arquivos
    if not copy_attendant_files(install_dir):
        input("\nPressione Enter para sair...")
        return False
    
    # Criar scripts
    create_startup_script(install_dir, server_host, server_port)
    
    # Testar instala√ß√£o
    if not test_installation(install_dir):
        print("\n‚ö†Ô∏è  Instala√ß√£o conclu√≠da, mas teste falhou")
        print("   Verifique os logs para mais detalhes")
    
    # Resumo final
    show_installation_summary(install_dir, server_host, server_port)
    
    input("\nPressione Enter para finalizar...")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Instala√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante a instala√ß√£o: {e}")
        input("\nPressione Enter para sair...")
