#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Instala√ß√£o - Sistema Multi-Atendente
Instala e configura o sistema Quality com suporte a m√∫ltiplos atendentes
"""

import os
import sys
import json
import shutil
import subprocess
from pathlib import Path
from typing import Dict, Any, List

def print_banner():
    """Exibe banner de instala√ß√£o"""
    print("=" * 80)
    print("üöÄ QUALITY REMOTE CONTROL SYSTEM - INSTALA√á√ÉO MULTI-ATENDENTE")
    print("=" * 80)
    print("Sistema de monitoramento e controle remoto")
    print("para servi√ßos Quality com suporte a m√∫ltiplos atendentes")
    print("=" * 80)
    print()

def check_python_version():
    """Verifica vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_server_dependencies():
    """Instala depend√™ncias do servidor"""
    print("\nüì¶ Instalando depend√™ncias do servidor...")
    
    try:
        # Verificar se pip est√° dispon√≠vel
        subprocess.run([sys.executable, "-m", "pip", "--version"], 
                      check=True, capture_output=True)
        
        # Instalar depend√™ncias do servidor
        requirements_file = Path(__file__).parent / "servidor_control" / "requirements.txt"
        
        if requirements_file.exists():
            print("   Instalando depend√™ncias do servidor...")
            subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
            ], check=True)
            print("‚úÖ Depend√™ncias do servidor instaladas com sucesso")
        else:
            print("‚ö†Ô∏è  Arquivo requirements.txt n√£o encontrado")
            print("   Instalando depend√™ncias b√°sicas...")
            
            basic_deps = [
                "websocket-server==0.4",
                "colorama==0.4.6",
                "rich==13.7.0",
                "requests==2.31.0"
            ]
            
            for dep in basic_deps:
                subprocess.run([sys.executable, "-m", "pip", "install", dep], check=True)
            
            print("‚úÖ Depend√™ncias b√°sicas instaladas")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def create_server_installation_directory():
    """Cria diret√≥rio de instala√ß√£o do servidor"""
    print("\nüìÅ Criando diret√≥rio de instala√ß√£o do servidor...")
    
    install_dir = Path("C:\\Quality\\ControlPanel")
    
    try:
        install_dir.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {install_dir}")
        return install_dir
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rio: {e}")
        return None

def copy_server_files(install_dir: Path):
    """Copia arquivos do servidor"""
    print("\nüìã Copiando arquivos do servidor...")
    
    source_dir = Path(__file__).parent / "servidor_control"
    
    try:
        # Copiar arquivos principais
        files_to_copy = [
            "main.py",
            "requirements.txt"
        ]
        
        for file_name in files_to_copy:
            source_file = source_dir / file_name
            if source_file.exists():
                shutil.copy2(source_file, install_dir / file_name)
                print(f"   ‚úÖ {file_name}")
        
        # Copiar diret√≥rios
        dirs_to_copy = ["config", "core", "interface", "utils", "database"]
        
        for dir_name in dirs_to_copy:
            source_dir_path = source_dir / dir_name
            if source_dir_path.exists():
                dest_dir_path = install_dir / dir_name
                if dest_dir_path.exists():
                    shutil.rmtree(dest_dir_path)
                shutil.copytree(source_dir_path, dest_dir_path)
                print(f"   ‚úÖ {dir_name}/")
        
        print("‚úÖ Arquivos do servidor copiados com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao copiar arquivos: {e}")
        return False

def setup_initial_users():
    """Configura usu√°rios iniciais"""
    print("\nüë• Configurando usu√°rios iniciais...")
    
    try:
        # Verificar se arquivo de usu√°rios existe
        users_config_file = Path("servidor_control/config/users_config.json")
        
        if users_config_file.exists():
            print("‚úÖ Configura√ß√£o de usu√°rios encontrada")
            
            # Mostrar usu√°rios padr√£o
            with open(users_config_file, 'r', encoding='utf-8') as f:
                users_config = json.load(f)
            
            print("\nüë§ Usu√°rios padr√£o configurados:")
            for attendant in users_config.get("attendants", []):
                print(f"   - {attendant['display_name']} ({attendant['username']})")
                print(f"     Papel: {attendant['role']}")
                print(f"     Senha padr√£o: quality123")
                print()
            
            print("‚ö†Ô∏è  IMPORTANTE: Altere as senhas padr√£o ap√≥s a instala√ß√£o!")
            return True
        else:
            print("‚ö†Ô∏è  Arquivo de configura√ß√£o de usu√°rios n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao configurar usu√°rios: {e}")
        return False

def create_server_startup_scripts(install_dir: Path):
    """Cria scripts de inicializa√ß√£o do servidor"""
    print("\nüöÄ Criando scripts de inicializa√ß√£o do servidor...")
    
    try:
        # Script batch para Windows - Servidor
        server_batch_content = f"""@echo off
echo Iniciando Quality Control Panel Server...
cd /d "{install_dir}"
python main.py --multi-attendant --quality-mode
pause
"""
        
        server_batch_file = install_dir / "start_server.bat"
        with open(server_batch_file, 'w', encoding='utf-8') as f:
            f.write(server_batch_content)
        
        print(f"‚úÖ Script do servidor criado: {server_batch_file}")
        
        # Script para atendentes
        attendant_batch_content = f"""@echo off
echo Iniciando Interface de Atendente...
cd /d "{install_dir}"
python interface/attendant_cli.py
pause
"""
        
        attendant_batch_file = install_dir / "start_attendant.bat"
        with open(attendant_batch_file, 'w', encoding='utf-8') as f:
            f.write(attendant_batch_content)
        
        print(f"‚úÖ Script de atendente criado: {attendant_batch_file}")
        
        # Script administrativo
        admin_batch_content = f"""@echo off
echo Iniciando Interface Administrativa...
cd /d "{install_dir}"
python interface/admin_cli.py
pause
"""
        
        admin_batch_file = install_dir / "start_admin.bat"
        with open(admin_batch_file, 'w', encoding='utf-8') as f:
            f.write(admin_batch_content)
        
        print(f"‚úÖ Script administrativo criado: {admin_batch_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar scripts: {e}")
        return False

def create_uninstall_script(install_dir: Path):
    """Cria script de desinstala√ß√£o"""
    print("\nüóëÔ∏è  Criando script de desinstala√ß√£o...")
    
    try:
        uninstall_content = f"""@echo off
echo Desinstalando Quality Control Panel...
echo.
echo Tem certeza que deseja remover o Quality Control Panel?
echo Pressione qualquer tecla para continuar ou Ctrl+C para cancelar...
pause >nul

echo Parando servi√ßos...
taskkill /f /im python.exe 2>nul

echo Removendo arquivos...
cd /d "{install_dir.parent}"
rmdir /s /q "{install_dir.name}"

echo.
echo Quality Control Panel foi removido com sucesso!
pause
"""
        
        uninstall_file = install_dir / "uninstall.bat"
        with open(uninstall_file, 'w', encoding='utf-8') as f:
            f.write(uninstall_content)
        
        print(f"‚úÖ Script de desinstala√ß√£o criado: {uninstall_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar script de desinstala√ß√£o: {e}")
        return False

def test_server_installation(install_dir: Path):
    """Testa a instala√ß√£o do servidor"""
    print("\nüß™ Testando instala√ß√£o do servidor...")
    
    try:
        # Testar importa√ß√£o dos m√≥dulos
        test_script = f"""
import sys
sys.path.append(r"{install_dir}")

try:
    from config.settings import load_config
    from core.server import QualityControlServer
    from core.session_manager import SessionManager
    from core.attendant_manager import AttendantManager
    from utils.auth import QualityAuthManager
    print("‚úÖ M√≥dulos do servidor importados com sucesso")
except Exception as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {{e}}")
    sys.exit(1)

# Testar carregamento de configura√ß√£o
try:
    config = load_config(r"{install_dir}/config/server_config.json")
    print("‚úÖ Configura√ß√£o do servidor carregada com sucesso")
    print(f"   Host: {{config['server']['host']}}")
    print(f"   Porta: {{config['server']['port']}}")
    print(f"   Servi√ßos Quality: {{len(config['quality_services'])}}")
except Exception as e:
    print(f"‚ùå Erro ao carregar configura√ß√£o: {{e}}")
    sys.exit(1)

# Testar sistema de autentica√ß√£o
try:
    auth_manager = QualityAuthManager(r"{install_dir}/config/users_config.json")
    users = auth_manager.get_all_users()
    print(f"‚úÖ Sistema de autentica√ß√£o funcionando - {{len(users)}} usu√°rios")
except Exception as e:
    print(f"‚ùå Erro no sistema de autentica√ß√£o: {{e}}")
    sys.exit(1)

print("‚úÖ Teste de instala√ß√£o do servidor conclu√≠do com sucesso!")
"""
        
        result = subprocess.run([
            sys.executable, "-c", test_script
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Teste de instala√ß√£o do servidor passou")
            return True
        else:
            print("‚ùå Teste de instala√ß√£o do servidor falhou")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def show_installation_summary(install_dir: Path):
    """Exibe resumo da instala√ß√£o"""
    print("\n" + "=" * 80)
    print("üéâ INSTALA√á√ÉO MULTI-ATENDENTE CONCLU√çDA COM SUCESSO!")
    print("=" * 80)
    print(f"üìÅ Diret√≥rio do Servidor: {install_dir}")
    print()
    print("üöÄ COMO USAR O SISTEMA:")
    print()
    print("1. INICIAR O SERVIDOR:")
    print(f"   {install_dir}\\start_server.bat")
    print("   (Execute como Administrador)")
    print()
    print("2. CONECTAR ATENDENTES:")
    print(f"   {install_dir}\\start_attendant.bat")
    print("   (Execute para cada atendente)")
    print()
    print("3. ACESSAR PAINEL ADMINISTRATIVO:")
    print(f"   {install_dir}\\start_admin.bat")
    print("   (Apenas para administradores)")
    print()
    print("üë§ USU√ÅRIOS PADR√ÉO:")
    print("   admin / admin123 (Administrador)")
    print("   joao.silva / quality123 (Suporte S√™nior)")
    print("   maria.santos / quality123 (Suporte J√∫nior)")
    print()
    print("‚ö†Ô∏è  IMPORTANTE:")
    print("   - Altere as senhas padr√£o ap√≥s a instala√ß√£o")
    print("   - Configure os IPs dos clientes no servidor")
    print("   - Instale o agente nos computadores dos clientes")
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Instalar agentes nos computadores dos clientes")
    print("2. Configurar rede e firewall")
    print("3. Testar conectividade")
    print("4. Treinar atendentes no sistema")
    print()
    print(f"üóëÔ∏è  Para desinstalar: {install_dir}\\uninstall.bat")
    print("=" * 80)

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print_banner()
    
    # Verifica√ß√µes iniciais
    if not check_python_version():
        input("\nPressione Enter para sair...")
        return False
    
    # Instalar depend√™ncias do servidor
    if not install_server_dependencies():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias")
        input("\nPressione Enter para sair...")
        return False
    
    # Criar diret√≥rio de instala√ß√£o
    install_dir = create_server_installation_directory()
    if not install_dir:
        input("\nPressione Enter para sair...")
        return False
    
    # Copiar arquivos
    if not copy_server_files(install_dir):
        input("\nPressione Enter para sair...")
        return False
    
    # Configurar usu√°rios iniciais
    setup_initial_users()
    
    # Criar scripts
    create_server_startup_scripts(install_dir)
    create_uninstall_script(install_dir)
    
    # Testar instala√ß√£o
    if not test_server_installation(install_dir):
        print("\n‚ö†Ô∏è  Instala√ß√£o conclu√≠da, mas teste falhou")
        print("   Verifique os logs para mais detalhes")
    
    # Resumo final
    show_installation_summary(install_dir)
    
    input("\nPressione Enter para finalizar...")
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Instala√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante a instala√ß√£o: {e}")
        input("\nPressione Enter para sair...")
