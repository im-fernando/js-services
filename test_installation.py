#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Teste da Instala√ß√£o
Testa se a instala√ß√£o est√° funcionando corretamente
"""

import sys
import os
import subprocess

def test_installation():
    """Testa a instala√ß√£o completa"""
    print("üß™ TESTE DE INSTALA√á√ÉO - QUALITY CONTROL PANEL")
    print("=" * 50)
    
    # Teste 1: Verificar se o diret√≥rio existe
    print("\n1. Verificando diret√≥rio de instala√ß√£o...")
    server_dir = "C:\\Quality\\ControlPanel"
    if os.path.exists(server_dir):
        print(f"   ‚úÖ Diret√≥rio encontrado: {server_dir}")
    else:
        print(f"   ‚ùå Diret√≥rio n√£o encontrado: {server_dir}")
        return False
    
    # Teste 2: Verificar arquivos principais
    print("\n2. Verificando arquivos principais...")
    main_files = [
        "main.py",
        "config/server_config.json",
        "config/users_config.json",
        "core/server.py",
        "core/session_manager.py",
        "core/attendant_manager.py",
        "utils/auth.py"
    ]
    
    for file in main_files:
        file_path = os.path.join(server_dir, file)
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - N√ÉO ENCONTRADO")
            return False
    
    # Teste 3: Verificar depend√™ncias Python
    print("\n3. Verificando depend√™ncias Python...")
    try:
        import websocket
        print("   ‚úÖ websocket")
    except ImportError:
        print("   ‚ùå websocket - N√ÉO INSTALADO")
        return False
    
    try:
        import websocket_server
        print("   ‚úÖ websocket_server")
    except ImportError:
        print("   ‚ùå websocket_server - N√ÉO INSTALADO")
        return False
    
    try:
        import colorama
        print("   ‚úÖ colorama")
    except ImportError:
        print("   ‚ùå colorama - N√ÉO INSTALADO")
        return False
    
    # Teste 4: Verificar imports dos m√≥dulos
    print("\n4. Verificando imports dos m√≥dulos...")
    try:
        sys.path.insert(0, server_dir)
        
        from config.settings import load_config
        print("   ‚úÖ config.settings")
        
        from utils.auth import QualityAuthManager
        print("   ‚úÖ utils.auth")
        
        from core.session_manager import SessionManager
        print("   ‚úÖ core.session_manager")
        
        from core.attendant_manager import AttendantManager
        print("   ‚úÖ core.attendant_manager")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao importar m√≥dulos: {e}")
        return False
    
    # Teste 5: Verificar configura√ß√µes
    print("\n5. Verificando configura√ß√µes...")
    try:
        config_file = os.path.join(server_dir, "config", "server_config.json")
        config = load_config(config_file)
        print(f"   ‚úÖ Configura√ß√£o do servidor carregada")
        print(f"      Host: {config['server']['host']}")
        print(f"      Porta: {config['server']['port']}")
        
        users_file = os.path.join(server_dir, "config", "users_config.json")
        auth_manager = QualityAuthManager(users_file)
        users = auth_manager.get_all_users()
        print(f"   ‚úÖ Configura√ß√£o de usu√°rios carregada ({len(users)} usu√°rios)")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao carregar configura√ß√µes: {e}")
        return False
    
    # Teste 6: Verificar scripts de inicializa√ß√£o
    print("\n6. Verificando scripts de inicializa√ß√£o...")
    scripts = [
        "start_server.bat",
        "start_attendant.bat",
        "start_admin.bat"
    ]
    
    for script in scripts:
        script_path = os.path.join(server_dir, script)
        if os.path.exists(script_path):
            print(f"   ‚úÖ {script}")
        else:
            print(f"   ‚ùå {script} - N√ÉO ENCONTRADO")
            return False
    
    print("\n" + "=" * 50)
    print("üéâ TODOS OS TESTES PASSARAM!")
    print("=" * 50)
    print("‚úÖ A instala√ß√£o est√° funcionando corretamente")
    print("‚úÖ Todos os m√≥dulos podem ser importados")
    print("‚úÖ Todas as configura√ß√µes foram carregadas")
    print("‚úÖ Todos os scripts est√£o dispon√≠veis")
    print()
    print("üöÄ O sistema est√° pronto para uso!")
    print("   Execute: C:\\Quality\\ControlPanel\\start_server.bat")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    try:
        if test_installation():
            print("\n‚úÖ Instala√ß√£o verificada com sucesso!")
        else:
            print("\n‚ùå Problemas encontrados na instala√ß√£o")
            print("   Execute: python fix_installation.py")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
    
    input("\nPressione Enter para sair...")
