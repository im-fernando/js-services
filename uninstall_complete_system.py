#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Desinstala√ß√£o Completa - Sistema Quality Control Panel
Remove todos os componentes do sistema
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def print_banner():
    """Exibe banner de desinstala√ß√£o"""
    print("=" * 70)
    print("üóëÔ∏è  QUALITY CONTROL PANEL - DESINSTALA√á√ÉO COMPLETA")
    print("=" * 70)
    print("Removendo todos os componentes do sistema")
    print("=" * 70)
    print()

def confirm_uninstall():
    """Confirma se o usu√°rio quer desinstalar"""
    print("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover TODOS os componentes do sistema!")
    print("   - Servidor (C:\\Quality\\ControlPanel)")
    print("   - Atendentes (C:\\Quality\\AttendantClient)")
    print("   - Clientes (C:\\Quality\\RemoteAgent)")
    print("   - Documenta√ß√£o (C:\\Quality\\Documentation)")
    print()
    
    while True:
        choice = input("Deseja continuar com a desinstala√ß√£o? (s/N): ").strip().lower()
        if choice in ['s', 'sim', 'y', 'yes']:
            return True
        elif choice in ['n', 'n√£o', 'nao', 'no', '']:
            return False
        else:
            print("‚ùå Op√ß√£o inv√°lida. Digite 's' para sim ou 'n' para n√£o.")

def stop_services():
    """Para todos os servi√ßos do sistema"""
    print("\nüõë Parando servi√ßos do sistema...")
    
    try:
        # Parar processos Python relacionados
        processes = [
            "python.exe",
            "pythonw.exe"
        ]
        
        for process in processes:
            try:
                result = subprocess.run([
                    "taskkill", "/F", "/IM", process
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ Processo {process} parado")
                else:
                    print(f"   ‚ÑπÔ∏è  Processo {process} n√£o encontrado ou j√° parado")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao parar {process}: {e}")
        
        print("‚úÖ Servi√ßos parados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao parar servi√ßos: {e}")
        return False

def remove_directory(directory_path, description):
    """Remove um diret√≥rio e seu conte√∫do"""
    try:
        if os.path.exists(directory_path):
            shutil.rmtree(directory_path)
            print(f"   ‚úÖ {description} removido: {directory_path}")
            return True
        else:
            print(f"   ‚ÑπÔ∏è  {description} n√£o encontrado: {directory_path}")
            return True
    except Exception as e:
        print(f"   ‚ùå Erro ao remover {description}: {e}")
        return False

def remove_server():
    """Remove o servidor"""
    print("\nüñ•Ô∏è  Removendo servidor...")
    
    server_dir = "C:\\Quality\\ControlPanel"
    return remove_directory(server_dir, "Servidor")

def remove_attendants():
    """Remove os atendentes"""
    print("\nüë• Removendo atendentes...")
    
    attendant_dir = "C:\\Quality\\AttendantClient"
    return remove_directory(attendant_dir, "Atendentes")

def remove_clients():
    """Remove os clientes"""
    print("\nüñ•Ô∏è  Removendo clientes...")
    
    client_dir = "C:\\Quality\\RemoteAgent"
    return remove_directory(client_dir, "Clientes")

def remove_documentation():
    """Remove a documenta√ß√£o"""
    print("\nüìö Removendo documenta√ß√£o...")
    
    doc_dir = "C:\\Quality\\Documentation"
    return remove_directory(doc_dir, "Documenta√ß√£o")

def remove_quality_directory():
    """Remove o diret√≥rio Quality principal"""
    print("\nüóÇÔ∏è  Removendo diret√≥rio Quality...")
    
    quality_dir = "C:\\Quality"
    return remove_directory(quality_dir, "Diret√≥rio Quality")

def uninstall_dependencies():
    """Desinstala depend√™ncias Python"""
    print("\nüì¶ Desinstalando depend√™ncias Python...")
    
    try:
        deps = [
            "websocket-server",
            "websocket-client",
            "colorama",
            "rich",
            "requests"
        ]
        
        for dep in deps:
            try:
                result = subprocess.run([
                    sys.executable, "-m", "pip", "uninstall", dep, "-y"
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"   ‚úÖ {dep} desinstalado")
                else:
                    print(f"   ‚ÑπÔ∏è  {dep} n√£o encontrado ou j√° desinstalado")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao desinstalar {dep}: {e}")
        
        print("‚úÖ Depend√™ncias desinstaladas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao desinstalar depend√™ncias: {e}")
        return False

def clean_registry():
    """Limpa entradas do registro (se necess√°rio)"""
    print("\nüßπ Limpando registro do Windows...")
    
    try:
        # Aqui voc√™ pode adicionar comandos para limpar o registro
        # Por exemplo, remover chaves relacionadas ao sistema
        print("   ‚ÑπÔ∏è  Nenhuma entrada de registro encontrada para limpeza")
        print("‚úÖ Registro limpo")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar registro: {e}")
        return False

def clean_environment():
    """Limpa vari√°veis de ambiente"""
    print("\nüåç Limpando vari√°veis de ambiente...")
    
    try:
        # Aqui voc√™ pode adicionar comandos para limpar vari√°veis de ambiente
        # Por exemplo, remover PATH entries relacionadas ao sistema
        print("   ‚ÑπÔ∏è  Nenhuma vari√°vel de ambiente encontrada para limpeza")
        print("‚úÖ Vari√°veis de ambiente limpas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao limpar vari√°veis de ambiente: {e}")
        return False

def create_uninstall_log():
    """Cria log da desinstala√ß√£o"""
    print("\nüìù Criando log da desinstala√ß√£o...")
    
    try:
        from datetime import datetime
        
        log_content = f"""# Log de Desinstala√ß√£o - Quality Control Panel
Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Usu√°rio: {os.getenv('USERNAME', 'Desconhecido')}
Sistema: {os.name}

## Componentes Removidos:
- Servidor: C:\\Quality\\ControlPanel
- Atendentes: C:\\Quality\\AttendantClient
- Clientes: C:\\Quality\\RemoteAgent
- Documenta√ß√£o: C:\\Quality\\Documentation
- Diret√≥rio Principal: C:\\Quality

## Depend√™ncias Desinstaladas:
- websocket-server
- websocket-client
- colorama
- rich
- requests

## Status: Desinstala√ß√£o Conclu√≠da
"""
        
        # Salvar log no diret√≥rio tempor√°rio
        temp_dir = os.environ.get('TEMP', 'C:\\Temp')
        log_file = os.path.join(temp_dir, 'quality_control_panel_uninstall.log')
        
        with open(log_file, 'w', encoding='utf-8') as f:
            f.write(log_content)
        
        print(f"   ‚úÖ Log criado: {log_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar log: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Confirmar desinstala√ß√£o
    if not confirm_uninstall():
        print("\nüëã Desinstala√ß√£o cancelada pelo usu√°rio")
        input("Pressione Enter para sair...")
        return False
    
    print("\nüöÄ Iniciando desinstala√ß√£o...")
    
    # Parar servi√ßos
    if not stop_services():
        print("‚ö†Ô∏è  Continuando desinstala√ß√£o mesmo com erros nos servi√ßos...")
    
    # Remover componentes
    success = True
    
    if not remove_server():
        success = False
    
    if not remove_attendants():
        success = False
    
    if not remove_clients():
        success = False
    
    if not remove_documentation():
        success = False
    
    if not remove_quality_directory():
        success = False
    
    # Desinstalar depend√™ncias
    if not uninstall_dependencies():
        success = False
    
    # Limpeza adicional
    clean_registry()
    clean_environment()
    
    # Criar log
    create_uninstall_log()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ DESINSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 70)
        print("‚úÖ Todos os componentes foram removidos")
        print("‚úÖ Depend√™ncias foram desinstaladas")
        print("‚úÖ Sistema limpo completamente")
        print()
        print("üìù Log da desinstala√ß√£o salvo em:")
        print(f"   {os.environ.get('TEMP', 'C:\\Temp')}\\quality_control_panel_uninstall.log")
        print()
        print("üëã Obrigado por usar o Quality Control Panel!")
    else:
        print("‚ö†Ô∏è  DESINSTALA√á√ÉO CONCLU√çDA COM AVISOS")
        print("=" * 70)
        print("‚úÖ Componentes principais removidos")
        print("‚ö†Ô∏è  Alguns itens podem n√£o ter sido removidos completamente")
        print("   Verifique manualmente se necess√°rio")
        print()
        print("üìù Log da desinstala√ß√£o salvo em:")
        print(f"   {os.environ.get('TEMP', 'C:\\Temp')}\\quality_control_panel_uninstall.log")
    
    print("=" * 70)
    
    input("\nPressione Enter para finalizar...")
    return success

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Desinstala√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante a desinstala√ß√£o: {e}")
        input("\nPressione Enter para sair...")
